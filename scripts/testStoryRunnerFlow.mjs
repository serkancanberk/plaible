import 'dotenv/config';
import mongoose from 'mongoose';
import { UserStorySession } from '../models/UserStorySession.js';
import { Story } from '../models/Story.js';
import { StorySettings } from '../models/StorySettings.js';
import { StoryPrompt } from '../src/models/storyPromptModel.js';
import { Chapter } from '../models/Chapter.js';
import { generateSystemPrompt } from '../src/utils/generateSystemPrompt.js';
import { generateFirstChapter } from '../utils/storyEngine.js';

const MONGODB_URI = process.env.MONGODB_URI;

async function run() {
  if (!MONGODB_URI) {
    console.error('Missing MONGODB_URI in .env');
    process.exit(1);
  }

  await mongoose.connect(MONGODB_URI);
  console.log('MongoDB connected');

  try {
    console.log('🧪 Testing StoryRunner Flow...\n');

    // Test 1: Check if we have the required data
    console.log('📋 Test 1: Checking required data');
    
    const existingStory = await Story.findOne();
    const storySettings = await StorySettings.getDefaultSettings();
    
    if (!existingStory) {
      console.log('❌ No stories found. Please run seedStory.mjs first.');
      process.exit(1);
    }
    
    if (!storySettings) {
      console.log('❌ No story settings found. Please run seedStorySettings.mjs first.');
      process.exit(1);
    }

    console.log('✅ Found story:', existingStory.title);
    console.log('✅ Found story settings with', storySettings.tone_styles.length, 'tone styles and', storySettings.time_flavors.length, 'time flavors');

    // Test 2: Test system prompt generation
    console.log('\n📋 Test 2: Testing system prompt generation');
    
    const testUserId = '64b7cafe1234567890cafe12';
    const testStoryId = existingStory._id;
    const testToneStyleId = storySettings.tone_styles[0].id;
    const testTimeFlavorId = storySettings.time_flavors[0].id;

    console.log(`Using: storyId=${testStoryId}, toneStyleId=${testToneStyleId}, timeFlavorId=${testTimeFlavorId}`);

    // Create a test session
    const testSession = new UserStorySession({
      userId: testUserId,
      storyId: testStoryId,
      toneStyleId: testToneStyleId,
      timeFlavorId: testTimeFlavorId,
      systemPrompt: 'Temporary prompt - will be updated',
      status: 'active',
      currentChapter: 1,
      chaptersGenerated: 0,
      sessionStartedAt: new Date(),
      lastActivityAt: new Date()
    });

    const savedTestSession = await testSession.save();
    console.log(`✅ Test session created: ${savedTestSession._id}`);

    // Generate system prompt
    const generatedPrompt = await generateSystemPrompt(savedTestSession._id.toString());
    if (generatedPrompt) {
      console.log('✅ System prompt generated successfully');
      console.log('Prompt preview:', generatedPrompt.substring(0, 200) + '...');
      
      // Save to story_prompts
      const storyPrompt = new StoryPrompt({
        sessionId: savedTestSession._id.toString(),
        userId: testUserId,
        storyId: testStoryId,
        finalPrompt: generatedPrompt
      });
      await storyPrompt.save();
      console.log('✅ System prompt saved to story_prompts collection');
    } else {
      console.log('❌ Failed to generate system prompt');
    }

    // Test 3: Test Chapter model
    console.log('\n📋 Test 3: Testing Chapter model');
    
    const testChapter = new Chapter({
      sessionId: savedTestSession._id,
      chapterIndex: 1,
      systemPromptUsed: generatedPrompt || 'Test prompt',
      openingBeat: 'The story begins with a mysterious event',
      title: 'Test Chapter 1',
      content: 'This is a test chapter content that would normally be generated by AI.',
      choices: [
        { text: 'Go left', nextChapterId: null },
        { text: 'Go right', nextChapterId: null },
        { text: 'Stay put', nextChapterId: null }
      ]
    });

    const savedChapter = await testChapter.save();
    console.log('✅ Test chapter created:', savedChapter._id);

    // Test Chapter static methods
    const chaptersBySession = await Chapter.findBySessionId(savedTestSession._id.toString());
    console.log(`✅ Found ${chaptersBySession.length} chapters for session`);

    const chapterByIndex = await Chapter.findBySessionAndIndex(savedTestSession._id.toString(), 1);
    console.log('✅ Found chapter by index:', chapterByIndex ? 'Yes' : 'No');

    const latestChapter = await Chapter.getLatestChapter(savedTestSession._id.toString());
    console.log('✅ Found latest chapter:', latestChapter ? 'Yes' : 'No');

    const chapterCount = await Chapter.getChapterCount(savedTestSession._id.toString());
    console.log(`✅ Chapter count: ${chapterCount}`);

    // Test Chapter instance methods
    const isRecent = savedChapter.isRecent(60);
    console.log(`✅ Chapter is recent (within 60 min): ${isRecent}`);

    // Test 4: Test story engine (without OpenAI call)
    console.log('\n📋 Test 4: Testing story engine components');
    
    // Test story engine import
    try {
      const storyEngine = await import('../utils/storyEngine.js');
      if (storyEngine.generateFirstChapter && storyEngine.generateNextChapter) {
        console.log('✅ Story engine utility functions available');
      } else {
        console.log('❌ Story engine utility functions not available');
      }
    } catch (error) {
      console.log('❌ Story engine import failed:', error.message);
    }

    // Test 5: Test API endpoint simulation
    console.log('\n📋 Test 5: Testing API endpoint simulation');
    
    // Simulate the startNewStorySession endpoint logic
    const apiTestUserId = '64b7cafe1234567890cafe13';
    const apiTestStoryId = existingStory._id;
    const apiTestToneStyleId = storySettings.tone_styles[1]?.id || storySettings.tone_styles[0].id;
    const apiTestTimeFlavorId = storySettings.time_flavors[1]?.id || storySettings.time_flavors[0].id;

    console.log('Simulating API call with:', { apiTestUserId, apiTestStoryId, apiTestToneStyleId, apiTestTimeFlavorId });

    // Create session
    const apiTestSession = new UserStorySession({
      userId: apiTestUserId,
      storyId: apiTestStoryId,
      toneStyleId: apiTestToneStyleId,
      timeFlavorId: apiTestTimeFlavorId,
      systemPrompt: 'Temporary prompt - will be updated',
      status: 'active',
      currentChapter: 1,
      chaptersGenerated: 0,
      sessionStartedAt: new Date(),
      lastActivityAt: new Date()
    });

    const savedApiTestSession = await apiTestSession.save();
    console.log(`✅ API test session created: ${savedApiTestSession._id}`);

    // Generate and save prompt
    const apiGeneratedPrompt = await generateSystemPrompt(savedApiTestSession._id.toString());
    if (apiGeneratedPrompt) {
      savedApiTestSession.systemPrompt = apiGeneratedPrompt;
      await savedApiTestSession.save();

      const apiStoryPrompt = new StoryPrompt({
        sessionId: savedApiTestSession._id.toString(),
        userId: apiTestUserId,
        storyId: apiTestStoryId,
        finalPrompt: apiGeneratedPrompt
      });
      await apiStoryPrompt.save();
      console.log('✅ API test prompt generated and saved');
    }

    // Test 6: Test data relationships
    console.log('\n📋 Test 6: Testing data relationships');
    
    // Test session -> story relationship
    const sessionWithStory = await UserStorySession.findById(savedApiTestSession._id).populate('storyId');
    console.log('✅ Session-story relationship working');

    // Test session -> prompt relationship
    const sessionPrompt = await StoryPrompt.findBySessionId(savedApiTestSession._id.toString());
    console.log('✅ Session-prompt relationship working:', sessionPrompt ? 'Yes' : 'No');

    // Test session -> chapters relationship
    const sessionChapters = await Chapter.findBySessionId(savedApiTestSession._id.toString());
    console.log(`✅ Session-chapters relationship working: ${sessionChapters.length} chapters`);

    // Test 7: Test error handling
    console.log('\n📋 Test 7: Testing error handling');
    
    try {
      // Test invalid session ID
      const invalidPrompt = await generateSystemPrompt('invalid_session_id');
      console.log('✅ Invalid session ID handled correctly:', invalidPrompt === null);
    } catch (error) {
      console.log('✅ Invalid session ID error handled:', error.message);
    }

    try {
      // Test invalid chapter data
      const invalidChapter = new Chapter({
        // Missing required fields
      });
      await invalidChapter.save();
      console.log('❌ Should have failed validation');
    } catch (error) {
      console.log('✅ Chapter validation working:', error.message.includes('required'));
    }

    console.log('\n🎊 All tests completed successfully!');
    console.log('\n📊 Summary:');
    console.log('   ✅ Chapter model created and tested');
    console.log('   ✅ Story engine utilities ready');
    console.log('   ✅ API routes implemented');
    console.log('   ✅ System prompt generation working');
    console.log('   ✅ Data relationships established');
    console.log('   ✅ Error handling implemented');

    console.log('\n🚀 Ready for OpenAI integration!');
    console.log('   Set OPENAI_API_KEY in .env to test AI chapter generation');

  } catch (error) {
    console.error('❌ Test failed:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('MongoDB disconnected');
  }
}

run().catch(e => { 
  console.error('❌ Script failed:', e); 
  process.exit(1); 
});
